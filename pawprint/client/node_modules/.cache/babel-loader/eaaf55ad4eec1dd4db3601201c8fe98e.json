{"ast":null,"code":"/**\n * React Router v6.0.2\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport { createContext, useRef, useState, useLayoutEffect, createElement, useContext, useEffect, useMemo, useCallback, Children, isValidElement, Fragment } from 'react';\nimport { createMemoryHistory, Action, parsePath } from 'history';\n\nfunction invariant(cond, message) {\n  if (!cond) throw new Error(message);\n}\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nconst alreadyWarned = {};\n\nfunction warningOnce(key, cond, message) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n    process.env.NODE_ENV !== \"production\" ? warning(false, message) : void 0;\n  }\n} ///////////////////////////////////////////////////////////////////////////////\n// CONTEXT\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Navigator is a \"location changer\"; it's how you get to different locations.\n *\n * Every history instance conforms to the Navigator interface, but the\n * distinction is useful primarily when it comes to the low-level <Router> API\n * where both the location and a navigator must be provided separately in order\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\n * and/or location were to be read directly from the history instance.\n */\n\n\nconst NavigationContext = /*#__PURE__*/createContext(null);\n\nif (process.env.NODE_ENV !== \"production\") {\n  NavigationContext.displayName = \"Navigation\";\n}\n\nconst LocationContext = /*#__PURE__*/createContext(null);\n\nif (process.env.NODE_ENV !== \"production\") {\n  LocationContext.displayName = \"Location\";\n}\n\nconst RouteContext = /*#__PURE__*/createContext({\n  outlet: null,\n  matches: []\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  RouteContext.displayName = \"Route\";\n} ///////////////////////////////////////////////////////////////////////////////\n// COMPONENTS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * A <Router> that stores all entries in memory.\n *\n * @see https://reactrouter.com/docs/en/v6/api#memoryrouter\n */\n\n\nfunction MemoryRouter(_ref) {\n  let {\n    basename,\n    children,\n    initialEntries,\n    initialIndex\n  } = _ref;\n  let historyRef = useRef();\n\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({\n      initialEntries,\n      initialIndex\n    });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = useState({\n    action: history.action,\n    location: history.location\n  });\n  useLayoutEffect(() => history.listen(setState), [history]);\n  return /*#__PURE__*/createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history\n  });\n}\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/docs/en/v6/api#navigate\n */\n\n\nfunction Navigate(_ref2) {\n  let {\n    to,\n    replace,\n    state\n  } = _ref2;\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of\n  // the router loaded. We can help them understand how to avoid that.\n  \"<Navigate> may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  process.env.NODE_ENV !== \"production\" ? warning(!useContext(NavigationContext).static, \"<Navigate> must not be used on the initial render in a <StaticRouter>. \" + \"This is a no-op, but you should modify your code so the <Navigate> is \" + \"only ever rendered in response to some user interaction or state change.\") : void 0;\n  let navigate = useNavigate();\n  useEffect(() => {\n    navigate(to, {\n      replace,\n      state\n    });\n  });\n  return null;\n}\n/**\n * Renders the child route's element, if there is one.\n *\n * @see https://reactrouter.com/docs/en/v6/api#outlet\n */\n\n\nfunction Outlet(_props) {\n  return useOutlet();\n}\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/docs/en/v6/api#route\n */\n\n\nfunction Route(_props) {\n  process.env.NODE_ENV !== \"production\" ? invariant(false, \"A <Route> is only ever to be used as the child of <Routes> element, \" + \"never rendered directly. Please wrap your <Route> in a <Routes>.\") : invariant(false);\n}\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won't render a <Router> directly. Instead, you'll render a\n * router that is more specific to your environment such as a <BrowserRouter>\n * in web browsers or a <StaticRouter> for server rendering.\n *\n * @see https://reactrouter.com/docs/en/v6/api#router\n */\n\n\nfunction Router(_ref3) {\n  let {\n    basename: basenameProp = \"/\",\n    children = null,\n    location: locationProp,\n    navigationType = Action.Pop,\n    navigator,\n    static: staticProp = false\n  } = _ref3;\n  !!useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"You cannot render a <Router> inside another <Router>.\" + \" You should never have more than one in your app.\") : invariant(false) : void 0;\n  let basename = normalizePathname(basenameProp);\n  let navigationContext = useMemo(() => ({\n    basename,\n    navigator,\n    static: staticProp\n  }), [basename, navigator, staticProp]);\n\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\"\n  } = locationProp;\n  let location = useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n\n    if (trailingPathname == null) {\n      return null;\n    }\n\n    return {\n      pathname: trailingPathname,\n      search,\n      hash,\n      state,\n      key\n    };\n  }, [basename, pathname, search, hash, state, key]);\n  process.env.NODE_ENV !== \"production\" ? warning(location != null, \"<Router basename=\\\"\" + basename + \"\\\"> is not able to match the URL \" + (\"\\\"\" + pathname + search + hash + \"\\\" because it does not start with the \") + \"basename, so the <Router> won't render anything.\") : void 0;\n\n  if (location == null) {\n    return null;\n  }\n\n  return /*#__PURE__*/createElement(NavigationContext.Provider, {\n    value: navigationContext\n  }, /*#__PURE__*/createElement(LocationContext.Provider, {\n    children: children,\n    value: {\n      location,\n      navigationType\n    }\n  }));\n}\n/**\n * A container for a nested tree of <Route> elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#routes\n */\n\n\nfunction Routes(_ref4) {\n  let {\n    children,\n    location\n  } = _ref4;\n  return useRoutes(createRoutesFromChildren(children), location);\n} ///////////////////////////////////////////////////////////////////////////////\n// HOOKS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usehref\n */\n\n\nfunction useHref(to) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useHref() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  let {\n    basename,\n    navigator\n  } = useContext(NavigationContext);\n  let {\n    hash,\n    pathname,\n    search\n  } = useResolvedPath(to);\n  let joinedPathname = pathname;\n\n  if (basename !== \"/\") {\n    let toPathname = getToPathname(to);\n    let endsWithSlash = toPathname != null && toPathname.endsWith(\"/\");\n    joinedPathname = pathname === \"/\" ? basename + (endsWithSlash ? \"/\" : \"\") : joinPaths([basename, pathname]);\n  }\n\n  return navigator.createHref({\n    pathname: joinedPathname,\n    search,\n    hash\n  });\n}\n/**\n * Returns true if this component is a descendant of a <Router>.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useinroutercontext\n */\n\n\nfunction useInRouterContext() {\n  return useContext(LocationContext) != null;\n}\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you're using this it may mean you're doing some of your own\n * \"routing\" in your app, and we'd like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/docs/en/v6/api#uselocation\n */\n\n\nfunction useLocation() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useLocation() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  return useContext(LocationContext).location;\n}\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usenavigationtype\n */\n\n\nfunction useNavigationType() {\n  return useContext(LocationContext).navigationType;\n}\n/**\n * Returns true if the URL for the given \"to\" value matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * <NavLink>.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usematch\n */\n\n\nfunction useMatch(pattern) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useMatch() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  return matchPath(pattern, useLocation().pathname);\n}\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\n\n/**\n * Returns an imperative method for changing the location. Used by <Link>s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usenavigate\n */\n\n\nfunction useNavigate() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useNavigate() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  let {\n    basename,\n    navigator\n  } = useContext(NavigationContext);\n  let {\n    matches\n  } = useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let routePathnamesJson = JSON.stringify(matches.map(match => match.pathnameBase));\n  let activeRef = useRef(false);\n  useEffect(() => {\n    activeRef.current = true;\n  });\n  let navigate = useCallback(function (to, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    process.env.NODE_ENV !== \"production\" ? warning(activeRef.current, \"You should call navigate() in a React.useEffect(), not when \" + \"your component is first rendered.\") : void 0;\n    if (!activeRef.current) return;\n\n    if (typeof to === \"number\") {\n      navigator.go(to);\n      return;\n    }\n\n    let path = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname);\n\n    if (basename !== \"/\") {\n      path.pathname = joinPaths([basename, path.pathname]);\n    }\n\n    (!!options.replace ? navigator.replace : navigator.push)(path, options.state);\n  }, [basename, navigator, routePathnamesJson, locationPathname]);\n  return navigate;\n}\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by <Outlet> to render child routes.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useoutlet\n */\n\n\nfunction useOutlet() {\n  return useContext(RouteContext).outlet;\n}\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useparams\n */\n\n\nfunction useParams() {\n  let {\n    matches\n  } = useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? routeMatch.params : {};\n}\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useresolvedpath\n */\n\n\nfunction useResolvedPath(to) {\n  let {\n    matches\n  } = useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let routePathnamesJson = JSON.stringify(matches.map(match => match.pathnameBase));\n  return useMemo(() => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname), [to, routePathnamesJson, locationPathname]);\n}\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an <Outlet> to render their child route's\n * element.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useroutes\n */\n\n\nfunction useRoutes(routes, locationArg) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useRoutes() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  let {\n    matches: parentMatches\n  } = useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n\n  if (process.env.NODE_ENV !== \"production\") {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    let parentPath = parentRoute && parentRoute.path || \"\";\n    warningOnce(parentPathname, !parentRoute || parentPath.endsWith(\"*\"), \"You rendered descendant <Routes> (or called `useRoutes()`) at \" + (\"\\\"\" + parentPathname + \"\\\" (under <Route path=\\\"\" + parentPath + \"\\\">) but the \") + \"parent route path has no trailing \\\"*\\\". This means if you navigate \" + \"deeper, the parent won't match anymore and therefore the child \" + \"routes will never render.\\n\\n\" + (\"Please change the parent <Route path=\\\"\" + parentPath + \"\\\"> to <Route \") + (\"path=\\\"\" + parentPath + \"/*\\\">.\"));\n  }\n\n  let locationFromContext = useLocation();\n  let location;\n\n  if (locationArg) {\n    var _parsedLocationArg$pa;\n\n    let parsedLocationArg = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n    !(parentPathnameBase === \"/\" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, \" + \"the location pathname must begin with the portion of the URL pathname that was \" + (\"matched by all parent routes. The current pathname base is \\\"\" + parentPathnameBase + \"\\\" \") + (\"but pathname \\\"\" + parsedLocationArg.pathname + \"\\\" was given in the `location` prop.\")) : invariant(false) : void 0;\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n\n  let pathname = location.pathname || \"/\";\n  let remainingPathname = parentPathnameBase === \"/\" ? pathname : pathname.slice(parentPathnameBase.length) || \"/\";\n  let matches = matchRoutes(routes, {\n    pathname: remainingPathname\n  });\n\n  if (process.env.NODE_ENV !== \"production\") {\n    process.env.NODE_ENV !== \"production\" ? warning(parentRoute || matches != null, \"No routes matched location \\\"\" + location.pathname + location.search + location.hash + \"\\\" \") : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(matches == null || matches[matches.length - 1].route.element !== undefined, \"Matched leaf route at location \\\"\" + location.pathname + location.search + location.hash + \"\\\" does not have an element. \" + \"This means it will render an <Outlet /> with a null value by default resulting in an \\\"empty\\\" page.\") : void 0;\n  }\n\n  return _renderMatches(matches && matches.map(match => Object.assign({}, match, {\n    params: Object.assign({}, parentParams, match.params),\n    pathname: joinPaths([parentPathnameBase, match.pathname]),\n    pathnameBase: match.pathnameBase === \"/\" ? parentPathnameBase : joinPaths([parentPathnameBase, match.pathnameBase])\n  })), parentMatches);\n} ///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/docs/en/v6/api#createroutesfromchildren\n */\n\n\nfunction createRoutesFromChildren(children) {\n  let routes = [];\n  Children.forEach(children, element => {\n    if (! /*#__PURE__*/isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n\n    if (element.type === Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(routes, createRoutesFromChildren(element.props.children));\n      return;\n    }\n\n    !(element.type === Route) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"[\" + (typeof element.type === \"string\" ? element.type : element.type.name) + \"] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>\") : invariant(false) : void 0;\n    let route = {\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      index: element.props.index,\n      path: element.props.path\n    };\n\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(element.props.children);\n    }\n\n    routes.push(route);\n  });\n  return routes;\n}\n/**\n * The parameters that were parsed from the URL path.\n */\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/api#generatepath\n */\n\n\nfunction generatePath(path, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  return path.replace(/:(\\w+)/g, (_, key) => {\n    !(params[key] != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Missing \\\":\" + key + \"\\\" param\") : invariant(false) : void 0;\n    return params[key];\n  }).replace(/\\/*\\*$/, _ => params[\"*\"] == null ? \"\" : params[\"*\"].replace(/^\\/*/, \"/\"));\n}\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/api#matchroutes\n */\n\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], routes, pathname);\n  }\n\n  return matches;\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  routes.forEach((route, index) => {\n    let meta = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      !meta.relativePath.startsWith(parentPath) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\") : invariant(false) : void 0;\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      !(route.index !== true) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\")) : invariant(false) : void 0;\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  });\n  return branches;\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\n\nconst isSplat = s => s === \"*\";\n\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, // TODO: attach original route object inside routesMeta so we don't need this arg\nroutesArg, pathname) {\n  let routes = routesArg;\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = routes[meta.childrenIndex];\n    matches.push({\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: joinPaths([matchedPathname, match.pathnameBase]),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n\n    routes = route.children;\n  }\n\n  return matches;\n}\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\n\n\nfunction renderMatches(matches) {\n  return _renderMatches(matches);\n}\n\nfunction _renderMatches(matches, parentMatches) {\n  if (parentMatches === void 0) {\n    parentMatches = [];\n  }\n\n  if (matches == null) return null;\n  return matches.reduceRight((outlet, match, index) => {\n    return /*#__PURE__*/createElement(RouteContext.Provider, {\n      children: match.route.element !== undefined ? match.route.element : /*#__PURE__*/createElement(Outlet, null),\n      value: {\n        outlet,\n        matches: parentMatches.concat(matches.slice(0, index + 1))\n      }\n    });\n  }, null);\n}\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/api#matchpath\n */\n\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  process.env.NODE_ENV !== \"production\" ? warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\")) : void 0;\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else {\n    regexpSource += end ? \"\\\\/*$\" // When matching to the end, ignore trailing slashes\n    : // Otherwise, at least match a word boundary. This restricts parent\n    // routes to matching only their own words and nothing more, e.g. parent\n    // route \"/home\" should not match \"/home2\".\n    \"(?:\\\\b|$)\";\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    process.env.NODE_ENV !== \"production\" ? warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\")) : void 0;\n    return value;\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/api#resolvepath\n */\n\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction resolveTo(toArg, routePathnames, locationPathname) {\n  let to = typeof toArg === \"string\" ? parsePath(toArg) : toArg;\n  let toPathname = toArg === \"\" || to.pathname === \"\" ? \"/\" : to.pathname; // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  let from;\n\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original to value had one.\n\n  if (toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\") && !path.pathname.endsWith(\"/\")) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  let nextChar = pathname.charAt(basename.length);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(basename.length) || \"/\";\n}\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash; ///////////////////////////////////////////////////////////////////////////////\n\n\nexport { MemoryRouter, Navigate, Outlet, Route, Router, Routes, LocationContext as UNSAFE_LocationContext, NavigationContext as UNSAFE_NavigationContext, RouteContext as UNSAFE_RouteContext, createRoutesFromChildren, generatePath, matchPath, matchRoutes, renderMatches, resolvePath, useHref, useInRouterContext, useLocation, useMatch, useNavigate, useNavigationType, useOutlet, useParams, useResolvedPath, useRoutes };","map":{"version":3,"sources":["/Users/siyuchen/Documents/GitHub/pawprint/pawprint/client/node_modules/react-router/index.js"],"names":["createContext","useRef","useState","useLayoutEffect","createElement","useContext","useEffect","useMemo","useCallback","Children","isValidElement","Fragment","createMemoryHistory","Action","parsePath","invariant","cond","message","Error","warning","console","warn","e","alreadyWarned","warningOnce","key","process","env","NODE_ENV","NavigationContext","displayName","LocationContext","RouteContext","outlet","matches","MemoryRouter","_ref","basename","children","initialEntries","initialIndex","historyRef","current","history","state","setState","action","location","listen","Router","navigationType","navigator","Navigate","_ref2","to","replace","useInRouterContext","static","navigate","useNavigate","Outlet","_props","useOutlet","Route","_ref3","basenameProp","locationProp","Pop","staticProp","normalizePathname","navigationContext","pathname","search","hash","trailingPathname","stripBasename","Provider","value","Routes","_ref4","useRoutes","createRoutesFromChildren","useHref","useResolvedPath","joinedPathname","toPathname","getToPathname","endsWithSlash","endsWith","joinPaths","createHref","useLocation","useNavigationType","useMatch","pattern","matchPath","locationPathname","routePathnamesJson","JSON","stringify","map","match","pathnameBase","activeRef","options","go","path","resolveTo","parse","push","useParams","routeMatch","length","params","routes","locationArg","parentMatches","parentParams","parentPathname","parentPathnameBase","parentRoute","route","parentPath","locationFromContext","_parsedLocationArg$pa","parsedLocationArg","startsWith","remainingPathname","slice","matchRoutes","element","undefined","_renderMatches","Object","assign","forEach","type","apply","props","name","caseSensitive","index","generatePath","_","branches","flattenRoutes","rankRouteBranches","i","matchRouteBranch","parentsMeta","meta","relativePath","childrenIndex","routesMeta","concat","score","computeScore","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","segments","split","initialScore","some","filter","reduce","segment","test","siblings","every","n","branch","routesArg","matchedParams","matchedPathname","end","renderMatches","reduceRight","matcher","paramNames","compilePath","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","regexpSource","RegExp","decodeURIComponent","error","resolvePath","fromPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","join","toArg","routePathnames","from","routePathnameIndex","toSegments","shift","toLowerCase","nextChar","charAt","paths","UNSAFE_LocationContext","UNSAFE_NavigationContext","UNSAFE_RouteContext"],"mappings":"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","sourcesContent":["/**\n * React Router v6.0.2\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport { createContext, useRef, useState, useLayoutEffect, createElement, useContext, useEffect, useMemo, useCallback, Children, isValidElement, Fragment } from 'react';\nimport { createMemoryHistory, Action, parsePath } from 'history';\n\nfunction invariant(cond, message) {\n  if (!cond) throw new Error(message);\n}\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nconst alreadyWarned = {};\n\nfunction warningOnce(key, cond, message) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n    process.env.NODE_ENV !== \"production\" ? warning(false, message) : void 0;\n  }\n} ///////////////////////////////////////////////////////////////////////////////\n// CONTEXT\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Navigator is a \"location changer\"; it's how you get to different locations.\n *\n * Every history instance conforms to the Navigator interface, but the\n * distinction is useful primarily when it comes to the low-level <Router> API\n * where both the location and a navigator must be provided separately in order\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\n * and/or location were to be read directly from the history instance.\n */\n\n\nconst NavigationContext = /*#__PURE__*/createContext(null);\n\nif (process.env.NODE_ENV !== \"production\") {\n  NavigationContext.displayName = \"Navigation\";\n}\n\nconst LocationContext = /*#__PURE__*/createContext(null);\n\nif (process.env.NODE_ENV !== \"production\") {\n  LocationContext.displayName = \"Location\";\n}\n\nconst RouteContext = /*#__PURE__*/createContext({\n  outlet: null,\n  matches: []\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  RouteContext.displayName = \"Route\";\n} ///////////////////////////////////////////////////////////////////////////////\n// COMPONENTS\n///////////////////////////////////////////////////////////////////////////////\n\n\n/**\n * A <Router> that stores all entries in memory.\n *\n * @see https://reactrouter.com/docs/en/v6/api#memoryrouter\n */\nfunction MemoryRouter(_ref) {\n  let {\n    basename,\n    children,\n    initialEntries,\n    initialIndex\n  } = _ref;\n  let historyRef = useRef();\n\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({\n      initialEntries,\n      initialIndex\n    });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = useState({\n    action: history.action,\n    location: history.location\n  });\n  useLayoutEffect(() => history.listen(setState), [history]);\n  return /*#__PURE__*/createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history\n  });\n}\n\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/docs/en/v6/api#navigate\n */\nfunction Navigate(_ref2) {\n  let {\n    to,\n    replace,\n    state\n  } = _ref2;\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of\n  // the router loaded. We can help them understand how to avoid that.\n  \"<Navigate> may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  process.env.NODE_ENV !== \"production\" ? warning(!useContext(NavigationContext).static, \"<Navigate> must not be used on the initial render in a <StaticRouter>. \" + \"This is a no-op, but you should modify your code so the <Navigate> is \" + \"only ever rendered in response to some user interaction or state change.\") : void 0;\n  let navigate = useNavigate();\n  useEffect(() => {\n    navigate(to, {\n      replace,\n      state\n    });\n  });\n  return null;\n}\n\n/**\n * Renders the child route's element, if there is one.\n *\n * @see https://reactrouter.com/docs/en/v6/api#outlet\n */\nfunction Outlet(_props) {\n  return useOutlet();\n}\n\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/docs/en/v6/api#route\n */\nfunction Route(_props) {\n   process.env.NODE_ENV !== \"production\" ? invariant(false, \"A <Route> is only ever to be used as the child of <Routes> element, \" + \"never rendered directly. Please wrap your <Route> in a <Routes>.\") : invariant(false) ;\n}\n\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won't render a <Router> directly. Instead, you'll render a\n * router that is more specific to your environment such as a <BrowserRouter>\n * in web browsers or a <StaticRouter> for server rendering.\n *\n * @see https://reactrouter.com/docs/en/v6/api#router\n */\nfunction Router(_ref3) {\n  let {\n    basename: basenameProp = \"/\",\n    children = null,\n    location: locationProp,\n    navigationType = Action.Pop,\n    navigator,\n    static: staticProp = false\n  } = _ref3;\n  !!useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"You cannot render a <Router> inside another <Router>.\" + \" You should never have more than one in your app.\") : invariant(false) : void 0;\n  let basename = normalizePathname(basenameProp);\n  let navigationContext = useMemo(() => ({\n    basename,\n    navigator,\n    static: staticProp\n  }), [basename, navigator, staticProp]);\n\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\"\n  } = locationProp;\n  let location = useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n\n    if (trailingPathname == null) {\n      return null;\n    }\n\n    return {\n      pathname: trailingPathname,\n      search,\n      hash,\n      state,\n      key\n    };\n  }, [basename, pathname, search, hash, state, key]);\n  process.env.NODE_ENV !== \"production\" ? warning(location != null, \"<Router basename=\\\"\" + basename + \"\\\"> is not able to match the URL \" + (\"\\\"\" + pathname + search + hash + \"\\\" because it does not start with the \") + \"basename, so the <Router> won't render anything.\") : void 0;\n\n  if (location == null) {\n    return null;\n  }\n\n  return /*#__PURE__*/createElement(NavigationContext.Provider, {\n    value: navigationContext\n  }, /*#__PURE__*/createElement(LocationContext.Provider, {\n    children: children,\n    value: {\n      location,\n      navigationType\n    }\n  }));\n}\n\n/**\n * A container for a nested tree of <Route> elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#routes\n */\nfunction Routes(_ref4) {\n  let {\n    children,\n    location\n  } = _ref4;\n  return useRoutes(createRoutesFromChildren(children), location);\n} ///////////////////////////////////////////////////////////////////////////////\n// HOOKS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usehref\n */\n\nfunction useHref(to) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useHref() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  let {\n    basename,\n    navigator\n  } = useContext(NavigationContext);\n  let {\n    hash,\n    pathname,\n    search\n  } = useResolvedPath(to);\n  let joinedPathname = pathname;\n\n  if (basename !== \"/\") {\n    let toPathname = getToPathname(to);\n    let endsWithSlash = toPathname != null && toPathname.endsWith(\"/\");\n    joinedPathname = pathname === \"/\" ? basename + (endsWithSlash ? \"/\" : \"\") : joinPaths([basename, pathname]);\n  }\n\n  return navigator.createHref({\n    pathname: joinedPathname,\n    search,\n    hash\n  });\n}\n/**\n * Returns true if this component is a descendant of a <Router>.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useinroutercontext\n */\n\nfunction useInRouterContext() {\n  return useContext(LocationContext) != null;\n}\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you're using this it may mean you're doing some of your own\n * \"routing\" in your app, and we'd like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/docs/en/v6/api#uselocation\n */\n\nfunction useLocation() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useLocation() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  return useContext(LocationContext).location;\n}\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usenavigationtype\n */\n\nfunction useNavigationType() {\n  return useContext(LocationContext).navigationType;\n}\n/**\n * Returns true if the URL for the given \"to\" value matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * <NavLink>.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usematch\n */\n\nfunction useMatch(pattern) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useMatch() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  return matchPath(pattern, useLocation().pathname);\n}\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\n\n/**\n * Returns an imperative method for changing the location. Used by <Link>s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usenavigate\n */\nfunction useNavigate() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useNavigate() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  let {\n    basename,\n    navigator\n  } = useContext(NavigationContext);\n  let {\n    matches\n  } = useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let routePathnamesJson = JSON.stringify(matches.map(match => match.pathnameBase));\n  let activeRef = useRef(false);\n  useEffect(() => {\n    activeRef.current = true;\n  });\n  let navigate = useCallback(function (to, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    process.env.NODE_ENV !== \"production\" ? warning(activeRef.current, \"You should call navigate() in a React.useEffect(), not when \" + \"your component is first rendered.\") : void 0;\n    if (!activeRef.current) return;\n\n    if (typeof to === \"number\") {\n      navigator.go(to);\n      return;\n    }\n\n    let path = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname);\n\n    if (basename !== \"/\") {\n      path.pathname = joinPaths([basename, path.pathname]);\n    }\n\n    (!!options.replace ? navigator.replace : navigator.push)(path, options.state);\n  }, [basename, navigator, routePathnamesJson, locationPathname]);\n  return navigate;\n}\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by <Outlet> to render child routes.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useoutlet\n */\n\nfunction useOutlet() {\n  return useContext(RouteContext).outlet;\n}\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useparams\n */\n\nfunction useParams() {\n  let {\n    matches\n  } = useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? routeMatch.params : {};\n}\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useresolvedpath\n */\n\nfunction useResolvedPath(to) {\n  let {\n    matches\n  } = useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let routePathnamesJson = JSON.stringify(matches.map(match => match.pathnameBase));\n  return useMemo(() => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname), [to, routePathnamesJson, locationPathname]);\n}\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an <Outlet> to render their child route's\n * element.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useroutes\n */\n\nfunction useRoutes(routes, locationArg) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useRoutes() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  let {\n    matches: parentMatches\n  } = useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n\n  if (process.env.NODE_ENV !== \"production\") {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    let parentPath = parentRoute && parentRoute.path || \"\";\n    warningOnce(parentPathname, !parentRoute || parentPath.endsWith(\"*\"), \"You rendered descendant <Routes> (or called `useRoutes()`) at \" + (\"\\\"\" + parentPathname + \"\\\" (under <Route path=\\\"\" + parentPath + \"\\\">) but the \") + \"parent route path has no trailing \\\"*\\\". This means if you navigate \" + \"deeper, the parent won't match anymore and therefore the child \" + \"routes will never render.\\n\\n\" + (\"Please change the parent <Route path=\\\"\" + parentPath + \"\\\"> to <Route \") + (\"path=\\\"\" + parentPath + \"/*\\\">.\"));\n  }\n\n  let locationFromContext = useLocation();\n  let location;\n\n  if (locationArg) {\n    var _parsedLocationArg$pa;\n\n    let parsedLocationArg = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n    !(parentPathnameBase === \"/\" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, \" + \"the location pathname must begin with the portion of the URL pathname that was \" + (\"matched by all parent routes. The current pathname base is \\\"\" + parentPathnameBase + \"\\\" \") + (\"but pathname \\\"\" + parsedLocationArg.pathname + \"\\\" was given in the `location` prop.\")) : invariant(false) : void 0;\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n\n  let pathname = location.pathname || \"/\";\n  let remainingPathname = parentPathnameBase === \"/\" ? pathname : pathname.slice(parentPathnameBase.length) || \"/\";\n  let matches = matchRoutes(routes, {\n    pathname: remainingPathname\n  });\n\n  if (process.env.NODE_ENV !== \"production\") {\n    process.env.NODE_ENV !== \"production\" ? warning(parentRoute || matches != null, \"No routes matched location \\\"\" + location.pathname + location.search + location.hash + \"\\\" \") : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(matches == null || matches[matches.length - 1].route.element !== undefined, \"Matched leaf route at location \\\"\" + location.pathname + location.search + location.hash + \"\\\" does not have an element. \" + \"This means it will render an <Outlet /> with a null value by default resulting in an \\\"empty\\\" page.\") : void 0;\n  }\n\n  return _renderMatches(matches && matches.map(match => Object.assign({}, match, {\n    params: Object.assign({}, parentParams, match.params),\n    pathname: joinPaths([parentPathnameBase, match.pathname]),\n    pathnameBase: match.pathnameBase === \"/\" ? parentPathnameBase : joinPaths([parentPathnameBase, match.pathnameBase])\n  })), parentMatches);\n} ///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/docs/en/v6/api#createroutesfromchildren\n */\n\nfunction createRoutesFromChildren(children) {\n  let routes = [];\n  Children.forEach(children, element => {\n    if (! /*#__PURE__*/isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n\n    if (element.type === Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(routes, createRoutesFromChildren(element.props.children));\n      return;\n    }\n\n    !(element.type === Route) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"[\" + (typeof element.type === \"string\" ? element.type : element.type.name) + \"] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>\") : invariant(false) : void 0;\n    let route = {\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      index: element.props.index,\n      path: element.props.path\n    };\n\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(element.props.children);\n    }\n\n    routes.push(route);\n  });\n  return routes;\n}\n/**\n * The parameters that were parsed from the URL path.\n */\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/api#generatepath\n */\nfunction generatePath(path, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  return path.replace(/:(\\w+)/g, (_, key) => {\n    !(params[key] != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Missing \\\":\" + key + \"\\\" param\") : invariant(false) : void 0;\n    return params[key];\n  }).replace(/\\/*\\*$/, _ => params[\"*\"] == null ? \"\" : params[\"*\"].replace(/^\\/*/, \"/\"));\n}\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/api#matchroutes\n */\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], routes, pathname);\n  }\n\n  return matches;\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  routes.forEach((route, index) => {\n    let meta = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      !meta.relativePath.startsWith(parentPath) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\") : invariant(false) : void 0;\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      !(route.index !== true) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\")) : invariant(false) : void 0;\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  });\n  return branches;\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\n\nconst isSplat = s => s === \"*\";\n\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, // TODO: attach original route object inside routesMeta so we don't need this arg\nroutesArg, pathname) {\n  let routes = routesArg;\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = routes[meta.childrenIndex];\n    matches.push({\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: joinPaths([matchedPathname, match.pathnameBase]),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n\n    routes = route.children;\n  }\n\n  return matches;\n}\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\n\n\nfunction renderMatches(matches) {\n  return _renderMatches(matches);\n}\n\nfunction _renderMatches(matches, parentMatches) {\n  if (parentMatches === void 0) {\n    parentMatches = [];\n  }\n\n  if (matches == null) return null;\n  return matches.reduceRight((outlet, match, index) => {\n    return /*#__PURE__*/createElement(RouteContext.Provider, {\n      children: match.route.element !== undefined ? match.route.element : /*#__PURE__*/createElement(Outlet, null),\n      value: {\n        outlet,\n        matches: parentMatches.concat(matches.slice(0, index + 1))\n      }\n    });\n  }, null);\n}\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\n\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/api#matchpath\n */\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  process.env.NODE_ENV !== \"production\" ? warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\")) : void 0;\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else {\n    regexpSource += end ? \"\\\\/*$\" // When matching to the end, ignore trailing slashes\n    : // Otherwise, at least match a word boundary. This restricts parent\n    // routes to matching only their own words and nothing more, e.g. parent\n    // route \"/home\" should not match \"/home2\".\n    \"(?:\\\\b|$)\";\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    process.env.NODE_ENV !== \"production\" ? warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\")) : void 0;\n    return value;\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/api#resolvepath\n */\n\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction resolveTo(toArg, routePathnames, locationPathname) {\n  let to = typeof toArg === \"string\" ? parsePath(toArg) : toArg;\n  let toPathname = toArg === \"\" || to.pathname === \"\" ? \"/\" : to.pathname; // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  let from;\n\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original to value had one.\n\n  if (toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\") && !path.pathname.endsWith(\"/\")) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  let nextChar = pathname.charAt(basename.length);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(basename.length) || \"/\";\n}\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash; ///////////////////////////////////////////////////////////////////////////////\n\nexport { MemoryRouter, Navigate, Outlet, Route, Router, Routes, LocationContext as UNSAFE_LocationContext, NavigationContext as UNSAFE_NavigationContext, RouteContext as UNSAFE_RouteContext, createRoutesFromChildren, generatePath, matchPath, matchRoutes, renderMatches, resolvePath, useHref, useInRouterContext, useLocation, useMatch, useNavigate, useNavigationType, useOutlet, useParams, useResolvedPath, useRoutes };\n//# sourceMappingURL=index.js.map\n"]},"metadata":{},"sourceType":"module"}