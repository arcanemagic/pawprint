{"version":3,"file":"cloudinary-react.umd.js","sources":["../src/Util/cloudinaryReactUtils.js","../src/Util/CloudinaryContextType.js","../src/components/CloudinaryComponent.jsx","../src/components/CloudinaryContext.jsx","../src/components/Image.jsx","../src/components/Transformation.jsx","../src/components/Video.jsx","../src/components/Audio.jsx","../src/components/Placeholder.jsx"],"sourcesContent":["import React from 'react';\nimport { Cloudinary, Transformation, Util } from 'cloudinary-core';\nimport PropTypes from 'prop-types';\n\nconst { camelCase, withCamelCaseKeys, isEmpty } = Util;\n\n// props passed to cloudinary-core but should not be rendered as dom attributes\nconst CLOUDINARY_REACT_PROPS = ['accessibility', 'breakpoints', 'dataSrc', 'placeholder', 'publicId', 'signature'];\n\n/**\n * Convert common video file extensions to mime types\n * Most other common video file extensions have an identical mime type so do not need conversion.\n */\nconst VIDEO_MIME_TYPES = {\n  flv: 'x-flv',\n  '3gp': '3gpp',\n  mov: 'quicktime',\n  mpg: 'mpeg',\n  avi: 'x-msvideo',\n  wmv: 'x-ms-wmv',\n  ogv: 'ogg'\n};\n\n/**\n * Convert common audio file extensions to mime types\n * Most other common audio file extensions have an identical mime type so do not need conversion.\n */\nconst AUDIO_MIME_TYPES = {\n  m4a: 'mp4',\n  wav: 'vnd.wav',\n  m3u: 'x-mpegurl',\n  mp3: 'mpeg',\n  ogv: 'ogg',\n  aif: 'x-aiff',\n  aifc: 'x-aiff',\n  aiff: 'x-aiff'\n};\n\n// props passed to cloudinary-core for dom elements attributes generation\n// Map Cloudinary props from array to object for efficient lookup\nconst CLOUDINARY_PROPS = [...Transformation.PARAM_NAMES, ...CLOUDINARY_REACT_PROPS].map(Util.camelCase).reduce(\n  (accumulator, cloudinaryPropName) => {\n    accumulator[cloudinaryPropName] = true;\n    return accumulator;\n  },\n  {}\n);\n\n/**\n * Return object without null/undefined entries\n * @param {*} obj\n */\nconst nonEmpty = (obj) => Object.entries(obj).reduce((a, [k, v]) => (v == null ? a : { ...a, [k]: v }), {});\n\n/**\n * Generated a configured Cloudinary object.\n * @param extendedProps React props combined with custom Cloudinary configuration options\n * @return {Cloudinary} configured using extendedProps\n */\nconst getConfiguredCloudinary = (extendedProps) => {\n  // eslint-disable-next-line camelcase\n  const { public_id, ...ops } = nonEmpty(extendedProps); // Remove null/undefined props\n  const options = Util.withSnakeCaseKeys(ops);\n  return Cloudinary.new(options);\n};\n\nconst getTag = (props, tagType) => {\n  const { publicId, ...ops } = props; // Remove null/undefined props\n  const cld = getConfiguredCloudinary(ops);\n  return cld[`${tagType}Tag`](publicId, Util.withSnakeCaseKeys(ops));\n};\n\n/**\n * Get a new <img> tag initialized with given props\n * @param {*} props\n */\nconst getImageTag = (props) => getTag(props, 'image');\n\n/**\n * Get a new <video> tag initialized with given props\n * @param {*} props\n */\nconst getVideoTag = (props) => getTag(props, 'video');\n\n/**\n * Cloudinary underlying JS library will handle responsive behavior\n * @param {HTMLImageElement} img\n * @param {object} options\n * @Return callback that when called, will remove the listener created by Cloudinary.responsive\n */\nconst makeElementResponsive = (img, options) => {\n  const snakeCaseOptions = Util.withSnakeCaseKeys(options);\n  const cld = getConfiguredCloudinary(snakeCaseOptions); // Initialize cloudinary with new props\n  cld.cloudinary_update(img, snakeCaseOptions);\n  return cld.responsive(snakeCaseOptions, false);\n};\n\n/**\n * Extracts cloudinaryProps and nonCloudinaryProps from given props\n *\n * @param props\n * @returns {{children: *, cloudinaryReactProps: {}, cloudinaryProps: {}, nonCloudinaryProps: {}}}\n */\nconst extractCloudinaryProps = ({ children, ...props }) => {\n  const result = {\n    children,\n    cloudinaryProps: {},\n    nonCloudinaryProps: {},\n    cloudinaryReactProps: {}\n  };\n\n  Object.keys(props).forEach((key) => {\n    const camelKey = Util.camelCase(key);\n    const value = props[key];\n\n    // if valid and defined add to cloudinaryProps\n    if (CLOUDINARY_PROPS[camelKey]) {\n      if (props[key] !== undefined && props[key] !== null) {\n        result.cloudinaryProps[camelKey] = value;\n      }\n    } else if (camelKey === 'includeOwnBody') { // cloudinary-react specific prop\n      result.cloudinaryReactProps[camelKey] = value;\n    } else { // not valid so add to nonCloudinaryProps\n      result.nonCloudinaryProps[key] = value;\n    }\n  });\n\n  return result;\n};\n\n/**\n * Generated a configured Cloudinary object.\n * @param extendedProps React props combined with custom Cloudinary configuration options\n * @return {Cloudinary} configured using extendedProps\n */\n/*\nconst getConfiguredCloudinary = (extendedProps) => {\n  const options = Util.extractUrlParams(Util.withSnakeCaseKeys(extendedProps));\n  return Cloudinary.new(options);\n};\n */\n\n/**\n * Generate a Cloudinary resource URL based on the options provided and child Transformation elements\n * @param extendedProps React props combined with custom Cloudinary configuration options\n * @returns {string} a cloudinary URL\n * @protected\n */\nconst getUrl = (extendedProps) => {\n  const { publicId } = extendedProps;\n  const cl = getConfiguredCloudinary(extendedProps);\n  return cl.url(publicId, getTransformation(extendedProps));\n};\n\n/**\n * Check if given component is a Cloudinary Component with given displayName\n * @param component the component to check\n * @param displayName of wanted component\n * @return {boolean}\n */\nconst isCloudinaryComponent = (component, displayName) => (\n  !!(React.isValidElement(component) &&\n    component.type &&\n    component.type.displayName === displayName)\n);\n\n/**\n * Combine properties of all options to create an option Object that can be passed to Cloudinary methods.<br>\n *   `undefined` and `null` values are filtered out.\n * @protected\n * @returns {Object}\n * @param options one or more options objects\n */\nconst normalizeOptions = (...options) => {\n  return options.reduce((left, right) => {\n    Object.keys(right || {}).forEach(key => {\n      const value = right[key];\n      if (value !== null && value !== undefined) {\n        left[key] = value;\n      }\n    });\n    return left;\n  }, {});\n};\n\nconst getChildPlaceholder = (children) => {\n  let result = null;\n  if (children) {\n    result = React.Children.toArray(children)\n      .find((child) => isCloudinaryComponent(child, 'CloudinaryPlaceholder'));\n  }\n\n  return result;\n};\n\nconst getChildTransformations = (children) => {\n  const result = children ? React.Children.toArray(children)\n    .filter((child) => isCloudinaryComponent(child, 'CloudinaryTransformation'))\n    .map((child) => {\n      const options = normalizeOptions(child.props, child.context);\n      const childOptions = getChildTransformations(child.props.children);\n      if (childOptions) {\n        options.transformation = childOptions;\n      }\n      return options;\n    }) : [];\n\n  return result.length ? result : null;\n};\n\n/**\n * Return a new object containing keys and values where keys are in the keys list\n * @param {object} source Object to copy values from\n * @param {string[]} [keys=[]] a list of keys\n * @returns {object} an object with copied values\n */\nconst only = (source, keys = []) => {\n  if (!source) {\n    return source;\n  }\n\n  return keys.reduce((tr, key) => {\n    if (key in source) {\n      tr[key] = source[key];\n    }\n    return tr;\n  }, {});\n};\n\n/**\n   * Create a React type definition object. All items are PropTypes.string or [string] or object or [object].\n   * @param {Array} configParams a list of parameter names\n   * @returns {Object}\n   * @private\n   */\nconst typesFrom = (configParams) => {\n  configParams = configParams || [];\n  const types = {};\n  for (let i = 0; i < configParams.length; i++) {\n    const key = configParams[i];\n    types[camelCase(key)] = PropTypes.any;\n  }\n  return types;\n};\n\n/**\n * Returns an object with all the transformation parameters based on the context and properties of this element\n * and any children.\n * @param extendedProps\n * @returns {object} a hash of transformation and configuration parameters\n * @protected\n */\nconst getTransformation = (extendedProps) => {\n  const {\n    children, accessibility, placeholder, ...rest\n  } = extendedProps;\n  const ownTransformation = only(withCamelCaseKeys(rest), Transformation.methods) || {};\n  const childrenOptions = getChildTransformations(children);\n  if (!isEmpty(childrenOptions)) {\n    ownTransformation.transformation = childrenOptions;\n  }\n\n  // Append placeholder and accessibility if exists\n  const advancedTransformations = { accessibility, placeholder };\n  Object.keys(advancedTransformations).filter((k) => advancedTransformations[k]).forEach((k) => {\n    ownTransformation[k] = advancedTransformations[k];\n  });\n\n  return ownTransformation;\n};\n\nexport {\n  nonEmpty,\n  getImageTag,\n  getVideoTag,\n  makeElementResponsive,\n  getConfiguredCloudinary,\n  CLOUDINARY_REACT_PROPS,\n  VIDEO_MIME_TYPES,\n  AUDIO_MIME_TYPES,\n  extractCloudinaryProps,\n  getUrl,\n  getChildPlaceholder,\n  getChildTransformations,\n  isCloudinaryComponent,\n  only,\n  typesFrom,\n  normalizeOptions,\n  getTransformation\n};\n","import React, { createContext } from 'react';\n\nexport const CloudinaryContextType = createContext();\n","// eslint-disable-next-line no-unused-vars\nimport React, { PureComponent, createRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { Transformation, Util } from 'cloudinary-core';\nimport { typesFrom, CloudinaryContextType, normalizeOptions } from '../Util';\n\nconst { camelCase } = Util;\n\n/**\n * A base component for Cloudinary components.\n * @protected\n */\nclass CloudinaryComponent extends PureComponent {\n  constructor(props, context) {\n    super(props, context);\n    this.element = createRef();\n  }\n\n  getContext = () => {\n    return this.context || {};\n  };\n\n  /**\n   * React function: Called when this element is in view\n   */\n  onIntersect = () => {\n    // eslint-disable-next-line react/no-unused-state\n    this.setState({ isInView: true });\n  };\n\n  /**\n   * Merges context & props\n   * @param props of this component\n   * @param context of this component\n   * @return {Object}\n   */\n  getExtendedProps = (props = this.props, context = this.getContext()) => {\n    return normalizeOptions(context, props);\n  };\n\n  /**\n   * Attach both this.element and props.innerRef as ref to the given element\n   * @param element - the element to attach a ref to\n   */\n  attachRef = (element) => {\n    const { innerRef } = this.props;\n    this.element.current = element;\n\n    if (innerRef) {\n      if (innerRef instanceof Function) {\n        innerRef(element);\n      } else {\n        innerRef.current = element;\n      }\n    }\n  };\n\n  render() {\n    return null;\n  }\n}\n\nCloudinaryComponent.defaultProps = { innerRef: null, publicId: null };\nCloudinaryComponent.propTypes = {\n  ...typesFrom(Transformation.PARAM_NAMES.map(camelCase)),\n  innerRef: PropTypes.any,\n  publicId: PropTypes.string\n};\n\nCloudinaryComponent.contextType = CloudinaryContextType;\n\nexport default CloudinaryComponent;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CloudinaryComponent from './CloudinaryComponent';\nimport { extractCloudinaryProps, CloudinaryContextType } from '../Util';\n\n/**\n * Provides a container for Cloudinary components. Any option set in CloudinaryContext will be passed to the children.\n *\n * @example\n *<CloudinaryContext cloudName=\"mycloud\" dpr=\"auto\">\n *    <!-- other tags -->\n *    <Image publicId={id}/>\n *</CloudinaryContext>\n *\n */\nclass CloudinaryContext extends CloudinaryComponent {\n  render() {\n    const props = { ...this.getContext(), ...this.props };\n\n    const {\n      children, cloudinaryProps, nonCloudinaryProps, cloudinaryReactProps\n    } = extractCloudinaryProps(props);\n\n    return (\n      <CloudinaryContextType.Provider value={cloudinaryProps}>\n        {cloudinaryReactProps.includeOwnBody ? children : <div {...nonCloudinaryProps}>{children}</div>}\n      </CloudinaryContextType.Provider>\n    );\n  }\n}\n\nCloudinaryContext.propTypes = { ...CloudinaryComponent.propTypes, includeOwnBody: PropTypes.bool };\nCloudinaryContext.defaultProps = { includeOwnBody: false };\n\nexport default CloudinaryContext;\n","import React, { createRef, Fragment } from 'react';\nimport { Util } from 'cloudinary-core';\nimport PropTypes from 'prop-types';\nimport CloudinaryComponent from './CloudinaryComponent';\nimport {\n  CLOUDINARY_REACT_PROPS, extractCloudinaryProps, getImageTag, makeElementResponsive, getChildPlaceholder, getTransformation\n} from '../Util';\n\nconst RESPONSIVE_OVERRIDE_WARNING = `\nWarning: passing a number value for width cancels the 'responsive' prop's effect on the image transformation.\nThe 'responsive' prop affects the image transformation only when width === 'auto'.\nPassing 'width=\"auto\" responsive' will affect the actual image width that is fetched from Cloudinary.\nThe 'responsive' prop causes the Image component to request an image which width is equal to the width of it's container.\nWhen passing 'width=\"auto\" responsive', you can set the <img> element width by passing a 'style' prop`.trim();\n\n/**\n * A component representing a Cloudinary served image\n */\nclass Image extends CloudinaryComponent {\n  constructor(props, context) {\n    super(props, context);\n    this.placeholderElement = createRef();\n    this.state = { isLoaded: false };\n    this.listenerRemovers = [];\n  }\n\n  /**\n   * @return true when this image element should be made responsive, false otherwise.\n   */\n  isResponsive = () => {\n    const { responsive, width } = this.getExtendedProps();\n    if (responsive && width !== 'auto') {\n      console.warn(RESPONSIVE_OVERRIDE_WARNING);\n    }\n\n    return responsive && this.element && this.element.current;\n  };\n\n  /**\n   * @return merged props & context with aggregated transformation, excluding children and innerRef.\n   */\n  getOptions = () => {\n    const extendedProps = this.getExtendedProps();\n    const { children, innerRef, ...options } = { ...extendedProps, ...getTransformation(extendedProps) };\n\n    if (!this.shouldLazyLoad()) {\n      delete options.loading;\n    }\n\n    return options;\n  };\n\n  /**\n   * @param additionalOptions - extra options to pass to cloudinary.url(), for example: placeholder\n   * @return attributes for the underlying <img> element.\n   */\n  getAttributes = (additionalOptions = {}) => {\n    const { placeholder } = additionalOptions;\n    const options = extractCloudinaryProps({ ...this.getOptions(), ...additionalOptions });\n    const { cloudinaryProps, nonCloudinaryProps, cloudinaryReactProps } = options;\n    const imageTag = getImageTag({ ...cloudinaryProps, ...cloudinaryReactProps });\n    const cloudinaryAttributes = Util.withCamelCaseKeys(imageTag.attributes());\n\n    // React requires camelCase instead of snake_case attributes\n    const attributes = ({ ...cloudinaryAttributes, ...nonCloudinaryProps });\n\n    // We want to keep 'data-src' if it exists\n    if (attributes.dataSrc) {\n      attributes['data-src'] = attributes.dataSrc;\n    }\n\n    // Set placeholder Id\n    if (placeholder && attributes.id) {\n      attributes.id += '-cld-placeholder';\n    }\n\n    // Set data-src if lazy loading and not in view\n    if (this.shouldLazyLoad()) {\n      attributes['data-src'] = attributes.dataSrc || attributes.src;\n      delete attributes.src;\n    }\n\n    // Remove unneeded attributes,\n    CLOUDINARY_REACT_PROPS.forEach((attr) => {\n      delete attributes[attr];\n    });\n\n    return attributes;\n  };\n\n  /**\n   * Update this image using cloudinary-core\n   */\n  update = () => {\n    // Handle lazy loading\n    if (this.shouldLazyLoad()) {\n      // Will set this.state.isInView = true when in view\n      Util.detectIntersection(this.element.current, this.onIntersect);\n    } else if (this.isResponsive()) {\n      const options = this.getOptions();\n      const placeholder = this.getPlaceholderType();\n\n      // Make placeholder responsive\n      if (placeholder) {\n        const removePlaceholderListener = makeElementResponsive(this.placeholderElement.current, { ...options, placeholder });\n        this.listenerRemovers.push(removePlaceholderListener);\n      }\n\n      // Make original image responsive\n      const removeImgListener = makeElementResponsive(this.element.current, options);\n      this.listenerRemovers.push(removeImgListener);\n    }\n  };\n\n  shouldLazyLoad = () => {\n    const { loading } = this.getExtendedProps();\n    const { isInView } = this.state;\n    return !isInView && (loading === 'lazy' || loading === 'auto');\n  }\n\n  /**\n   * Invoked immediately after a component is mounted (inserted into the tree)\n   */\n  componentDidMount() {\n    this.update();\n  }\n\n  /**\n   * Invoked immediately after updating occurs. This method is not called for the initial render.\n   */\n  componentDidUpdate() {\n    this.update();\n  }\n\n  componentWillUnmount() {\n    this.listenerRemovers.forEach((removeListener) => removeListener());\n  }\n\n  /**\n   * Updates this Image's isLoaded state,\n   * And fires props.onLoad if exists.\n   */\n  handleImageLoaded = () => {\n    const { onLoad } = this.props;\n    this.setState({ isLoaded: true }, () => {\n      if (onLoad) {\n        onLoad();\n      }\n    });\n  };\n\n  renderPlaceholder = (placeholder, attributes) => {\n    attributes.style = { ...(attributes.style || {}), opacity: 0, position: 'absolute' };\n    attributes.onLoad = this.handleImageLoaded;\n    const placeholderWrapperStyle = { display: 'inline' };\n    const placeholderAttributes = this.getAttributes({ placeholder });\n\n    return (\n      <Fragment>\n        {this.renderImage(attributes)}\n        <div style={placeholderWrapperStyle}>\n          <img ref={this.placeholderElement} {...placeholderAttributes} />\n        </div>\n      </Fragment>\n    );\n  };\n\n  renderImage = (attributes) => (\n    <img ref={this.attachRef} {...attributes} />\n  );\n\n  getPlaceholderType = () => {\n    const { children } = this.getExtendedProps();\n    const placeholder = getChildPlaceholder(children);\n\n    return placeholder ? placeholder.props.type : null;\n  };\n\n  render() {\n    const { isLoaded } = this.state;\n    const attributes = this.getAttributes();\n    const placeholder = this.getPlaceholderType();\n\n    // If image wasn't loaded and there's a child placeholder then we render it.\n    if (!isLoaded && placeholder) {\n      return this.renderPlaceholder(placeholder, attributes);\n    }\n\n    return this.renderImage(attributes);\n  }\n}\n\nImage.defaultProps = {};\nImage.propTypes = CloudinaryComponent.propTypes;\nImage.propTypes.responsive = PropTypes.bool;\nImage.propTypes.loading = PropTypes.string;\nImage.propTypes.accessibility = PropTypes.string;\n\nexport default Image;\n","// eslint-disable-next-line no-unused-vars\nimport React from 'react';\nimport CloudinaryComponent from './CloudinaryComponent';\n\n/**\n * Define a transformation that is applied to the parent tag.\n */\nclass Transformation extends CloudinaryComponent {\n  render() {\n    return null;\n  }\n}\n\nTransformation.propTypes = CloudinaryComponent.propTypes;\nTransformation.defaultProps = {};\nTransformation.exposesProps = true;\nTransformation.displayName = 'CloudinaryTransformation';\n\nexport default Transformation;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Cloudinary, Util } from 'cloudinary-core';\nimport CloudinaryComponent from './CloudinaryComponent';\nimport { VIDEO_MIME_TYPES, extractCloudinaryProps, normalizeOptions, getTransformation } from '../Util';\n\n/**\n * A component representing a Cloudinary served video\n */\nclass Video extends CloudinaryComponent {\n  mimeType = 'video';\n\n  mimeSubTypes = VIDEO_MIME_TYPES;\n\n  /**\n   * Merge context with props\n   * @return {*}\n   */\n  getMergedProps = () => ({ ...this.getContext(), ...this.props });\n\n  /**\n   * Generate a video source url\n   * @param cld - preconfigured cloudinary-core object\n   * @param publicId - identifier of the video asset\n   * @param childTransformations - child transformations for this video url\n   * @param sourceTransformations - source transformations this video url\n   * @param sourceType - format of the video url\n   * @return {*}\n   */\n  generateVideoUrl = (cld, publicId, childTransformations, sourceTransformations, sourceType) => {\n    const urlOptions = Util.withSnakeCaseKeys(Util.defaults({}, sourceTransformations, childTransformations, {\n      resource_type: 'video',\n      format: sourceType\n    }));\n\n    return cld.url(publicId, urlOptions);\n  };\n\n  /**\n   * Generate content of this video element from \"source types\" prop\n   * @param cld - preconfigured cloudinary-core object\n   * @param publicId - identifier of the video asset\n   * @param childTransformations - child transformations for this video element\n   * @param sourceTransformations - source transformations for source types\n   * @param sourceTypes - formats for each video url that will be generated\n   * @return {*}\n   */\n  generateUsingSourceTypes = (cld, publicId, childTransformations, sourceTransformations, sourceTypes) => (\n    sourceTypes.map((sourceType) => (\n      this.toSourceTag(\n        cld,\n        publicId,\n        childTransformations,\n        sourceTransformations[sourceType] || {},\n        sourceType,\n        this.buildMimeType(sourceType)\n      )\n    ))\n  );\n\n  /**\n   * Generate content of this video element from \"sources\" prop\n   * @param cld - preconfigured cloudinary-core object\n   * @param publicId - identifier of the video asset\n   * @param childTransformations - child transformations for this video element\n   * @param sources - formats for each video url that will be generated\n   */\n  generateUsingSources = (cld, publicId, childTransformations, sources) => (\n    sources.map(({ transformations = {}, type, codecs }) => (\n      this.toSourceTag(cld, publicId, childTransformations, transformations, type, this.buildMimeType(type, codecs))\n    ))\n  );\n\n  /**\n   * Creates <source> tag.\n   * @param cld - preconfigured cloudinary-core object\n   * @param publicId - identifier of the video asset\n   * @param childTransformations - child transformations for this video element\n   * @param transformations - source transformations for specified source type\n   * @param sourceType - format of the video url\n   * @param mimeType - MIME type if specified source type\n   */\n  toSourceTag = (cld, publicId, childTransformations, transformations, sourceType, mimeType) => {\n    const src = this.generateVideoUrl(\n      cld,\n      publicId,\n      childTransformations,\n      transformations,\n      sourceType\n    );\n    return <source key={src + mimeType} src={src} type={mimeType} />;\n  };\n\n  /**\n   * Determines MIME type of given source type and codecs.\n   * @param type - format of the video\n   * @param codecs - optional information about codecs of the video\n   */\n  buildMimeType = (type, codecs) => {\n    let mimeType = `${this.mimeType}/${this.mimeSubTypes[type] || type}`;\n    if (!Util.isEmpty(codecs)) {\n      mimeType += `; codecs=${Util.isArray(codecs) ? codecs.join(', ') : codecs}`;\n    }\n    return mimeType;\n  };\n\n  /**\n   * Get props for the video element that will be rendered\n   * @return {{tagAttributes: Object, sources: [<source>] | string}}\n   */\n  getVideoTagProps = () => {\n    let {\n      innerRef,\n      publicId,\n      fallback,\n      children,\n      sourceTypes,\n      sourceTransformation = {},\n      sources,\n      ...options\n    } = this.getMergedProps();\n\n    options = normalizeOptions(options, {});\n    const { cloudinaryProps, cloudinaryReactProps, nonCloudinaryProps } = extractCloudinaryProps(options);\n    options = { ...cloudinaryProps, ...cloudinaryReactProps };\n\n    // const snakeCaseOptions = toSnakeCaseKeys(options);\n    const snakeCaseOptions = Util.withSnakeCaseKeys(options);\n    const cld = Cloudinary.new(snakeCaseOptions);\n\n    // Use cloudinary-core to generate this video tag's attributes\n    let tagAttributes = cld.videoTag(publicId, options).attributes();\n    tagAttributes = { ...Util.withCamelCaseKeys(tagAttributes), ...nonCloudinaryProps };\n\n    // Aggregate child transformations, used for generating <source> tags for this video element\n    const childTransformations = getTransformation({ ...options, children });\n\n    let sourceElements = null;\n\n    if (Util.isArray(sources) && !Util.isEmpty(sources)) {\n      sourceElements = this.generateUsingSources(cld, publicId, childTransformations, sources);\n    } else if (Util.isArray(sourceTypes)) {\n      // We have multiple sourceTypes, so we generate <source> tags.\n      sourceElements = this.generateUsingSourceTypes(\n        cld,\n        publicId,\n        childTransformations,\n        sourceTransformation,\n        sourceTypes\n      );\n    } else {\n      // We have a single source type so we generate the src attribute of this video element.\n      tagAttributes.src = this.generateVideoUrl(\n        cld,\n        publicId,\n        childTransformations,\n        sourceTransformation[sourceTypes] || {},\n        sourceTypes\n      );\n    }\n\n    return { sources: sourceElements, tagAttributes };\n  };\n\n  reloadVideo = () => {\n    if (this.element && this.element.current) {\n      this.element.current.load();\n    }\n  }\n\n  componentDidUpdate() {\n    // Load video on props change\n    this.reloadVideo();\n  }\n\n  /**\n   * Render a video element\n   */\n  render() {\n    const { fallback, children } = this.props;\n\n    const {\n      tagAttributes, // Attributes of this video element\n      sources // <source> tags of this video element\n    } = this.getVideoTagProps();\n\n    return (\n      <video\n        ref={this.attachRef}\n        {...tagAttributes}\n      >\n        {sources}\n        {fallback}\n        {children}\n      </video>\n    );\n  }\n}\n\nVideo.propTypes = {\n  publicId: PropTypes.string,\n  sources: PropTypes.arrayOf(PropTypes.shape({\n    type: PropTypes.string,\n    codecs: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n    transformations: PropTypes.object\n  }))\n};\nVideo.defaultProps = {\n  sourceTypes: Cloudinary.DEFAULT_VIDEO_PARAMS.source_types\n};\n\nexport default Video;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Video from './Video';\nimport { AUDIO_MIME_TYPES } from '../Util';\n\n/**\n * A component representing a Cloudinary served audio\n * This component extends the Video component and replaces it's render function.\n * Audio files are uploaded to Cloudinary as a video asset type.\n * An <audio> tag with a video source, will play the audio only.\n */\nclass Audio extends Video {\n  mimeType = 'audio';\n  mimeSubTypes = AUDIO_MIME_TYPES;\n\n  /**\n   * Render an audio element\n   */\n  render() {\n    const { innerRef, fallback, children } = this.props;\n\n    const {\n      tagAttributes, // Attributes of this video element\n      sources // <source> tags of this video element\n    } = this.getVideoTagProps();\n\n    // We generated video attributes, lets delete the unneeded poster\n    delete tagAttributes.poster;\n\n    return (\n      <audio\n        ref={innerRef}\n        {...tagAttributes}\n      >\n        {sources}\n        {fallback}\n        {children}\n      </audio>\n    );\n  }\n}\n\nAudio.propTypes = { publicId: PropTypes.string };\nAudio.defaultProps = { sourceTypes: ['aac', 'mp3', 'ogg'] };\n\nexport default Audio;\n","// eslint-disable-next-line no-unused-vars\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Placeholder used by parent Image component, renders nothing on it's own.\n * @param type - type of placeholder 'blur'|'pixelate'|'predominant-color'|'vectorize',\n * @return {null}\n * @constructor\n */\n// eslint-disable-next-line no-unused-vars\nconst Placeholder = ({ type }) => null;\n\nPlaceholder.propTypes = {\n  type: PropTypes.string\n};\n\nPlaceholder.defaultProps = {\n  type: 'blur'\n};\n\nPlaceholder.displayName = 'CloudinaryPlaceholder';\n\nexport default Placeholder;\n"],"names":["camelCase","Util","withCamelCaseKeys","isEmpty","CLOUDINARY_REACT_PROPS","VIDEO_MIME_TYPES","flv","mov","mpg","avi","wmv","ogv","AUDIO_MIME_TYPES","m4a","wav","m3u","mp3","aif","aifc","aiff","CLOUDINARY_PROPS","Transformation","PARAM_NAMES","map","reduce","accumulator","cloudinaryPropName","nonEmpty","obj","Object","entries","a","k","v","getConfiguredCloudinary","extendedProps","ops","options","withSnakeCaseKeys","Cloudinary","getTag","props","tagType","publicId","cld","getImageTag","makeElementResponsive","img","snakeCaseOptions","cloudinary_update","responsive","extractCloudinaryProps","children","result","cloudinaryProps","nonCloudinaryProps","cloudinaryReactProps","keys","forEach","key","camelKey","value","undefined","isCloudinaryComponent","component","displayName","React","isValidElement","type","normalizeOptions","left","right","getChildPlaceholder","Children","toArray","find","child","getChildTransformations","filter","context","childOptions","transformation","length","only","source","tr","typesFrom","configParams","types","i","PropTypes","any","getTransformation","accessibility","placeholder","rest","ownTransformation","methods","childrenOptions","advancedTransformations","CloudinaryContextType","createContext","CloudinaryComponent","getContext","onIntersect","setState","isInView","getExtendedProps","attachRef","element","innerRef","current","Function","createRef","render","PureComponent","defaultProps","propTypes","string","contextType","CloudinaryContext","includeOwnBody","bool","RESPONSIVE_OVERRIDE_WARNING","trim","Image","isResponsive","width","console","warn","getOptions","shouldLazyLoad","loading","getAttributes","additionalOptions","imageTag","cloudinaryAttributes","attributes","dataSrc","id","src","attr","update","detectIntersection","getPlaceholderType","removePlaceholderListener","placeholderElement","listenerRemovers","push","removeImgListener","state","handleImageLoaded","onLoad","isLoaded","renderPlaceholder","style","opacity","position","placeholderWrapperStyle","display","placeholderAttributes","Fragment","renderImage","componentDidMount","componentDidUpdate","componentWillUnmount","removeListener","exposesProps","Video","mimeType","mimeSubTypes","getMergedProps","generateVideoUrl","childTransformations","sourceTransformations","sourceType","urlOptions","defaults","resource_type","format","url","generateUsingSourceTypes","sourceTypes","toSourceTag","buildMimeType","generateUsingSources","sources","transformations","codecs","isArray","join","getVideoTagProps","sourceTransformation","tagAttributes","videoTag","sourceElements","reloadVideo","load","fallback","arrayOf","shape","oneOfType","object","DEFAULT_VIDEO_PARAMS","source_types","Audio","poster","Placeholder"],"mappings":"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"}